<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd">
	<flow name="importCsvFlow" doc:id="c56b0203-96a9-4bb2-a5a4-af8e3520529e" initialState="stopped">
		<file:listener doc:name="import.csv" doc:id="dd1b8493-2ca6-4278-bfd8-7299fe7696b0" config-ref="File_Config_TestFolder" directory="C:\test\incoming" moveToDirectory="C:\test\processed">
			<scheduling-strategy >
				<fixed-frequency frequency="3000"/>
			</scheduling-strategy>
			<file:matcher filenamePattern="*.csv" />
		</file:listener>
		<logger level="INFO" doc:name="Logger" doc:id="916d97a1-f19f-42c0-a123-3040ac8ee47a" message="#[payload]"/>
		<ee:transform doc:name="Transform Message" doc:id="49eb6d48-7f3c-46f1-894a-6f78dd372212" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<foreach doc:name="For Each" doc:id="c2d5b966-bb0f-4c60-a1ae-aae2e5a31fe7" batchSize="3">
			<ee:transform doc:name="Transform Message" doc:id="7be83466-64bf-4bce-a3e3-47871a5631af" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
import * from dw::core::Strings
output application/csv
---
payload map ( payload01 , indexOfPayload01 ) -> {
	id: payload01.id,
	nominativo: (capitalize(payload01.nomedefault "")) ++ ' ' ++ capitalize(payload01.cognome),
	occupazione: payload01.categoria,
	livello: payload01.livello,
	cap: payload01.cap,
	residenza: upper(payload01.citta)
}]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<logger level="INFO" doc:name="Logger" doc:id="c2e09411-2a3a-4d4d-9f87-08e1d5e3c977" message="#[payload.nominativo]" />
			<db:bulk-insert doc:name="Bulk insert" doc:id="f7191b4d-2ebe-435c-9e19-1db9def5bb9c" config-ref="Database_Config_Derby">
				<db:sql ><![CDATA[INSERT INTO DIPENDENTI(id, nominativo, occupazione, livello, cap, residenza) 
VALUES (:id, :nominativo, :occupazione, :livello, :cap, :residenza)]]></db:sql>
			</db:bulk-insert>
		</foreach>
		<logger level="INFO" doc:name="Logger" doc:id="b5a7853a-beb1-476f-a0c2-fffa78f97e48" />
	</flow>
	<flow name="syncDBFlow" doc:id="b9698553-2127-4b58-9372-257978b94550">
		<db:listener doc:name="On Table Row DIPENDENTI" doc:id="684a923b-6fa6-40dd-b34e-99b897d18153" config-ref="Database_Config_Derby" table="DIPENDENTI" watermarkColumn="ID" idColumn="ID">
			<scheduling-strategy >
				<fixed-frequency frequency="5000"/>
			</scheduling-strategy>
		</db:listener>
		<logger level="INFO" doc:name="Logger" doc:id="f6f5ad2d-01eb-4576-b9d3-13810c306b63" message="#[payload]"/>
		<file:write doc:name="Write data" doc:id="6107e80b-2e63-4a40-bfdd-05fc44e4fb61" config-ref="File_Config_TestFolder" path="C:\test\processed\export.json" mode="APPEND">
			<file:content ><![CDATA[#[output application/json
---
payload]]]></file:content>
		</file:write>
	</flow>
	<flow name="postDipendente" doc:id="0e6592b9-20d1-433a-ab6b-0c9ac1935007" >
		<http:listener doc:name="POST /dipendenti" doc:id="e791b8ce-f664-4de5-9eba-3b338bbde172" config-ref="HTTP_Listener_config" path="/dipendenti" allowedMethods="POST">
			<http:error-response >
				<http:body ><![CDATA[#[payload]]]></http:body>
			</http:error-response>
		</http:listener>
		<json:validate-schema doc:name="Validate schema " doc:id="cdba67f0-5e44-4bda-8537-61bd3e6fc615" schema="dipendente-schema.json"/>
		<db:insert doc:name="Insert into DIPENDENTI" doc:id="d8c1ae7f-5465-4cb4-a4ea-1b786bca7d04" config-ref="Database_Config_Derby">
			<db:sql ><![CDATA[INSERT INTO DIPENDENTI(id, nominativo, occupazione, livello, cap, residenza) 
VALUES (:id, :nominativo, :occupazione, :livello, :cap, :residenza)]]></db:sql>
			<db:input-parameters ><![CDATA[#[payload]]]></db:input-parameters>
		</db:insert>
		<set-payload value="Record inserito con successo." doc:name="Set Payload" doc:id="eee3b0da-d50c-4b08-a290-9296eb1c2679" />
		<error-handler >
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="1bbd2cbf-14de-4db6-8f2e-af22f43b2366" type="JSON:INVALID_INPUT_JSON, JSON:INVALID_SCHEMA, JSON:SCHEMA_NOT_FOUND, JSON:SCHEMA_NOT_HONOURED">
				<ee:transform doc:name="Transform Message" doc:id="ced5a232-af69-44d6-b3ef-24529a99a086" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"message": "Il formato JSON dei dati non è corretto." ++ error.description as String
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</on-error-propagate>
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="5476b1a3-f6a3-4a4c-933a-23e2172b9ec7" type="ANY">
				<ee:transform doc:name="Transform Message" doc:id="e0fd3420-94af-4b99-b8dd-fa80ef5626a5">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	"message": "Impossibile inserire record: " ++ error.description as String
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</on-error-propagate>
		</error-handler>
	</flow>
	<flow name="getAllDipendenti" doc:id="2ac9f818-0ca0-4579-b9e9-03dd4777469d" >
		<http:listener doc:name="GET /dipendenti" doc:id="df89a117-4232-4ee5-a755-b650562ce82a" config-ref="HTTP_Listener_config" path="/dipendenti" allowedMethods="GET"/>
		<db:select doc:name="Select" doc:id="7a03a966-fd00-423f-a4cd-be7556143e1c" config-ref="Database_Config_Derby">
			<db:sql ><![CDATA[SELECT * FROM DIPENDENTI]]></db:sql>
		</db:select>
		<ee:transform doc:name="Transform Message" doc:id="9fb05858-6795-483e-a8c5-4ec455932c5a" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="createFlow" doc:id="12beb850-3b84-42cf-b3c7-dfe9ea53f508" doc:description="Execute this flow once if you want to create the table on your local Derby DB instance">
		<http:listener doc:name="GET /create" doc:id="623a08a2-7d16-4a84-8fac-6b52bb50d2d3" config-ref="HTTP_Listener_config" path="/create" allowedMethods="GET">
			<http:error-response >
				<http:body ><![CDATA[#[payload]]]></http:body>
			</http:error-response>
		</http:listener>
		<db:execute-ddl doc:name="Execute DDL" doc:id="0e5026ec-40b0-4e59-8d55-dd0f733bb385" config-ref="Database_Config_Derby">
			<db:sql ><![CDATA[CREATE TABLE DIPENDENTI (
	id VARCHAR(100),
    nominativo VARCHAR(100),
    occupazione VARCHAR(100),
    livello VARCHAR(100),
    cap VARCHAR(100),
    residenza VARCHAR(100)
    
)]]></db:sql>
		</db:execute-ddl>
		<logger level="INFO" doc:name="Logger" doc:id="bfc07c73-b314-4337-ae80-5ccfcd9919e2" />
		<ee:transform doc:name="Transform Message" doc:id="aebdb5a8-d9f3-4348-b797-3524eacd9891" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<error-handler >
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="2800ae4d-c862-454a-aef0-94116f5cd052" >
				<ee:transform doc:name="Transform Message" doc:id="53a215ad-f2c2-456c-9cce-7dd56edd3b7f" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"message": "Si è verificato un errore nella creazione della tabella." ++ error.description as String
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</on-error-propagate>
		</error-handler>
	</flow>
	<flow name="mule-etlFlow" doc:id="9f4f5750-5a0e-472f-9f01-aefab2453fe8" >
		<http:listener doc:name="DELETE /dipendenti" doc:id="06d1a0ec-8d10-4ecc-a23e-3f01e9b5b5c4" config-ref="HTTP_Listener_config" path="/dipendenti" allowedMethods="DELETE">
			<http:error-response >
				<http:body ><![CDATA[#[payload]]]></http:body>
			</http:error-response>
		</http:listener>
		<db:delete doc:name="Delete from DIPENDENTI" doc:id="beec4cfb-2a35-431e-8a82-115de1dc7334" config-ref="Database_Config_Derby">
			<db:sql ><![CDATA[DELETE FROM DIPENDENTI]]></db:sql>
		</db:delete>
		<db:execute-ddl doc:name="Drop Table Dipendenti" doc:id="fa9c4d2b-7f59-4d11-b4cf-ef37ff51462a" config-ref="Database_Config_Derby">
			<db:sql ><![CDATA[DROP TABLE DIPENDENTI]]></db:sql>
		</db:execute-ddl>
		<flow-ref doc:name="createFlow" doc:id="560dd5d9-fa60-4a97-a562-449f2b5de80d" name="createFlow"/>
		<error-handler >
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="5bf60b98-aba3-43d8-873a-8dc18d97eb73" >
				<ee:transform doc:name="Transform Message" doc:id="d41ad620-329f-468f-9f4c-f6fc53f98b2d" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"message": "Errore nella pulizia della tabella dipendendenti: " ++ error.description as String
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</on-error-propagate>
		</error-handler>
	</flow>
	<flow name="parallel_importCsvFlow" doc:id="da3259fd-0eba-4e9d-83fc-6283249c7025" initialState="stopped">
		<file:listener doc:name="import.csv" doc:id="87f2223e-42bb-4ee9-a2a2-86e9e1f597d3" config-ref="File_Config_TestFolder" directory="C:\test\incoming" moveToDirectory="C:\test\processed">
			<scheduling-strategy >
				<fixed-frequency frequency="3000" />
			</scheduling-strategy>
			<file:matcher filenamePattern="*.csv" />
		</file:listener>
		<logger level="INFO" doc:name="Logger" doc:id="6e2d65e7-4eb8-4fc8-b88f-34d4b6cac1b4" message="#[payload]" />
		<ee:transform doc:name="Transform Message" doc:id="5769b37e-f97d-4f2c-9172-bd369ac5b3d3" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<parallel-foreach doc:name="Parallel For Each" doc:id="a4885124-b07b-4bc5-a6d7-1085fca05036" >
			<ee:transform doc:name="Copy_of_Transform Message" doc:id="017d2ee1-624a-4e20-8f22-b0a19fedbdb3">
				<ee:message>
					<ee:set-payload><![CDATA[%dw 2.0
import * from dw::core::Strings
output application/csv
---
{
	id: payload.id,
	nominativo: (capitalize(payload.nomedefault "")) ++ ' ' ++ capitalize(payload.cognome),
	occupazione: payload.categoria,
	livello: payload.livello,
	cap: payload.cap,
	residenza: upper(payload.citta)
}]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<logger level="INFO" doc:name="Copy_of_Logger" doc:id="7b39385c-d372-458a-83ac-728c78826d80" message="#[payload.nominativo]" />
			<db:bulk-insert doc:name="Copy_of_Bulk insert" doc:id="67420bce-7430-48d0-badc-186d6eda7779" config-ref="Database_Config_Derby">
				<db:sql><![CDATA[INSERT INTO DIPENDENTI(id, nominativo, occupazione, livello, cap, residenza) 
VALUES (:id, :nominativo, :occupazione, :livello, :cap, :residenza)]]></db:sql>
			</db:bulk-insert>
		</parallel-foreach>
		<logger level="INFO" doc:name="Logger" doc:id="284c9183-9680-4742-abed-ecf5eed1eea6" />

	</flow>
	<flow name="batchAsyncParallelFlow" doc:id="155cb06c-89ed-4309-8a71-51bda140f699" >
		<file:listener doc:name="import.csv" doc:id="beb97386-d4e2-468f-905a-c996c3c9f994" config-ref="File_Config_TestFolder" directory="C:\test\incoming" moveToDirectory="C:\test\processed">
			<scheduling-strategy >
				<fixed-frequency frequency="3000" />
			</scheduling-strategy>
			<file:matcher filenamePattern="*.csv" />
		</file:listener>
		<logger level="INFO" doc:name="Logger" doc:id="6754d29b-47ed-4127-b528-c158dc9ffb8b" message="#[payload]" />
		<ee:transform doc:name="Transform Message" doc:id="dcbf70f4-33c5-4c0d-8f23-e4ff78278e5e" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<batch:job jobName="mule-etlBatch_Job" doc:id="868e7688-267c-44a3-ad55-de19ca0d51cf" blockSize="3">
			<batch:process-records >
				<batch:step name="Batch_Step" doc:id="a614bf61-9830-47cb-8e6a-51dd518c85cc" >
					<ee:transform doc:name="Copy_of_Transform Message" doc:id="3d319c15-ee64-475a-9db7-97c751ec60fd" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
import * from dw::core::Strings
output application/csv
---
{
	id: payload.id,
	nominativo: (capitalize(payload.nome
default "")) ++ ' ' ++ capitalize(payload.cognome),
	occupazione: payload.categoria,
	livello: payload.livello,
	cap: payload.cap,
	residenza: upper(payload.citta)
}]]></ee:set-payload>
						</ee:message>
					</ee:transform>
					<logger level="INFO" doc:name="Copy_of_Logger" doc:id="319f4d9d-e4a3-4828-864f-e4978308fac0" message="#[payload.nominativo]" />
					<db:bulk-insert doc:name="Copy_of_Bulk insert" doc:id="0dad6230-723b-4c3e-973d-fe0fcb52cc5e" config-ref="Database_Config_Derby" >
						<db:sql ><![CDATA[INSERT INTO DIPENDENTI(id, nominativo, occupazione, livello, cap, residenza) 
VALUES (:id, :nominativo, :occupazione, :livello, :cap, :residenza)]]></db:sql>
					</db:bulk-insert>
				</batch:step>
				<batch:step name="Batch_Step1" doc:id="f4687ed4-8f6f-4e84-9f9e-c6f6886392fe" acceptPolicy="ONLY_FAILURES">
					<logger level="ERROR" doc:name="Logger" doc:id="3a38e7db-e277-4324-800b-c4596d1dec0b" message="#['\n*** ERRORE RECORD: ' ++ payload.nominativo]"/>
				</batch:step>
			</batch:process-records>
			<batch:on-complete >
				<logger level="INFO" doc:name="Logger" doc:id="6bc4d45d-7ea2-4651-9f91-7219205ac2ac" message="#['\n**** BATCH JOB COMPLETED **** Loaded: ' ++ (payload.loadedRecords default &quot;0&quot;)]"/>
			</batch:on-complete>
		</batch:job>
		<logger level="INFO" doc:name="Logger" doc:id="796e77a5-c529-4523-9a59-68d85f0686ed" message="#['\n**** BATCH JOB STARTED ****']"/>
	</flow>
</mule>
